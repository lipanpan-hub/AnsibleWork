---
- name: 在主节点 设置replication用户
  community.mysql.mysql_user:
    name: "{{ mysql_replication_user.name }}"
    host: "{{ mysql_replication_user.host | default('%') }}"
    password: "{{ mysql_replication_user.password }}"
    priv: "{{ mysql_replication_user.priv | default('*.*:REPLICATION SLAVE,REPLICATION CLIENT') }}"
    state: present
  no_log: "{{ mysql_hide_passwords }}"
  when:
    - mysql_replication_role == 'master'
    - mysql_replication_user.name is defined
    - (mysql_replication_master | length) > 0
  tags: ['skip_ansible_galaxy']

- name: 从节点获取自身状态 注册到 slave变量
  community.mysql.mysql_replication:
    mode: getreplica
    login_user: "{{ mysql_root_username }}"
    login_password: "{{ mysql_root_password }}"
  no_log: "{{ mysql_hide_passwords }}"
  ignore_errors: true
  register: slave
  when:
    - mysql_replication_role == 'slave'
    - (mysql_replication_master | length) > 0
  tags: ['skip_ansible_galaxy']

# https://github.com/ansible/ansible/issues/82264
- name: 在从节点上获取主节点信息并注册到 master变量(仅在从节点未完成配置时候执行)  
  community.mysql.mysql_replication:
    mode: getprimary
  delegate_to: "{{ mysql_replication_master_inventory_host | default(omit, true) }}"
  register: master
  when:
    - (slave.Is_Slave is defined and not slave.Is_Slave) or (slave.Is_Replica is defined and not slave.Is_Replica) or (slave.Is_Slave is not defined and slave.Is_Replica is not defined and slave is failed)
    - mysql_replication_role == 'slave'
    - (mysql_replication_master | length) > 0
  tags: ['skip_ansible_galaxy']

- name: 在从节点上 配置 replication(仅在从节点未完成配置时候执行)(change master to)  
  community.mysql.mysql_replication:
    mode: changeprimary
    master_host: "{{ mysql_replication_master }}"
    master_user: "{{ mysql_replication_user.name }}"
    master_password: "{{ mysql_replication_user.password }}"
    master_log_file: "{{ master.File }}"
    master_log_pos: "{{ master.Position }}"
  no_log: "{{ mysql_hide_passwords }}"
  ignore_errors: true
  when:
    - (slave.Is_Slave is defined and not slave.Is_Slave) or (slave.Is_Replica is defined and not slave.Is_Replica) or (slave.Is_Slave is not defined and slave.Is_Replica is not defined and slave is failed)
    - mysql_replication_role == 'slave'
    - mysql_replication_user.name is defined
    - (mysql_replication_master | length) > 0


# 这里应该进行一些等待操作 然后重新获取一次从节点状态
- name: 重新获取一次从节点状态(此时从节点应该主备就绪了)
  community.mysql.mysql_replication:
    mode: getreplica
    login_user: "{{ mysql_root_username }}"
    login_password: "{{ mysql_root_password }}"
  no_log: "{{ mysql_hide_passwords }}"
  ignore_errors: true
  register: slave
  when:
    - mysql_replication_role == 'slave'
    - (mysql_replication_master | length) > 0

- name: 开始 主从同步(仅在从节点准备就绪后执行)(start replica)
  community.mysql.mysql_replication:
    mode: startreplica
  when:
    - (slave.Is_Slave is defined and slave.Is_Slave) or (slave.Is_Replica is defined and slave.Is_Replica) or (slave.Is_Slave is not defined and slave.Is_Replica is not defined and slave is failed)
    - mysql_replication_role == 'slave'
    - (mysql_replication_master | length) > 0
  tags: ['skip_ansible_galaxy']
